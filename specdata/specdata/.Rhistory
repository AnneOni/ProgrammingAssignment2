#extract file names and store as numeric
file.names = as.numeric(sub("\\.csv$","",fileList))
#setup file selection
selected.files = fileList[match(id,file.names)]
#import data
Data = lapply(file.path(directory,selected.files),read.csv)
#convert into data frame
Data = do.call(rbind.data.frame,Data)
#calculate mean
mean(Data[,pollutant],na.rm=TRUE)
}
pollutantmean("specdata","nitrate",1)
pollutantmean("specdata","sulfate",1)
pollutantmean("specdata", "sulfate", 1:10)
complete <- function(directory, id = 1:332) {
directory<-setwd("C:/Users/anne/Desktop/DataScienceFiles/specdata/specdata")
"specdata"<-directory
#lists the files in the directory
all_files <- list.files(directory, full.names = TRUE)
#empty data frame were we will store the read from the loop
compdf <- data.frame()
nobs = numeric()
#for (i in id) {
## binds all the rows of the of the files with "specified" ID
#compdf <- rbind(compdf, read.csv(all_files[i]))
#nobs <- sum(complete.cases(compdf))
nobs = rep(0, length(id))
k <- 1
for (i in id) {
compdf <- read.csv(all_files[i])
nobs[k] <- sum(complete.cases(compdf))
k <- k + 1
}
returnVal <- data.frame(id, nobs)
returnVal
}
complete("specdata",1)
complete("specdata",4)
complete("specdata", c(2, 4, 8, 10, 12))
pollutantmean <- function(directory, pollutant, id = 1:332) {
#assign the path to specdata
directory<-setwd("C:/Users/anne/Desktop/DataScienceFiles/specdata/specdata")
"specdata"<-directory
#get list of files
all_files = list.files(directory)
#extract file names and store as numeric
file.names = as.numeric(sub("\\.csv$","",all_files))
#setup file selection
selected.files = all_files[match(id,file.names)]
#import data
polDat = lapply(file.path(directory,selected.files),read.csv)
#convert into data frame
polDat = do.call(rbind.data.frame,potDat)
#calculate mean
mean(polDat[,pollutant],na.rm=TRUE)
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332) {
#assign the path to specdata
directory<-setwd("C:/Users/anne/Desktop/DataScienceFiles/specdata/specdata")
"specdata"<-directory
#get list of files
all_files = list.files(directory)
#extract file names and store as numeric
file.names = as.numeric(sub("\\.csv$","",all_files))
#setup file selection
selected.files = all_files[match(id,file.names)]
#import data
polDat = lapply(file.path(directory,selected.files),read.csv)
#convert into data frame
polDat = do.call(rbind.data.frame,polDat)
#calculate mean
mean(polDat[,pollutant],na.rm=TRUE)
}
pollutantmean("specdata", "sulfate", 1:10)
complete("specdata",1)
pollutantmean("specdata", "nitrate", 23)
complete("specdata", 30:25)
corr <- function(directory, threshold = 0) {
path <- paste0(getwd(),"/", directory)
corr_vect <- NULL
for (i in 1:332) {
if (i < 10) {
dat <- read.csv(paste(path,"/00", as.character(i),".csv", sep = ""),
as.is = T,
header = T)
}
else if (i < 100) {
dat <- read.csv(paste(path,"/0", as.character(i),".csv", sep = ""),
as.is = T,
header = T)
}
else {
dat <- read.csv(paste(path,"/", as.character(i),".csv", sep = ""),
as.is = T,
header = T)
}
data <- dat[complete.cases(dat),]
if (nrow(data) > threshold) {
corr_vect <- c(corr_vect, cor(data[,"sulfate"], data[, "nitrate"]))
}
}
return(corr_vect)
}
corr()
corr<-function(directory,threshold=0){
#assign the path to specdata
directory<-setwd("C:/Users/anne/Desktop/DataScienceFiles/specdata/specdata")
"specdata"<-directory
#lists the files in the directory
all_files<-list.files(directory,full.names = TRUE)
#create empty vector
crvec <- vector(mode = "numeric", length = 0)
for(i in 1:length(all_files)){
#read in file
temp<- read.csv(all_files[i],header=TRUE)
#delete NAs
temp<-temp[complete.cases(temp),]
#count the number of observations
csum<-nrow(temp)
#if the number of rows is greater than the threshold
if(csum>threshold){
#for that file you find the correlation between nitrate and sulfate
#combine each correlation for each file in vector format using the concatenate function
#since this is not a data frame we cannot use rbind or cbind
crdat<-c(crdat,cor(temp$nitrate,temp$sulfate))
}
}
return(crdat)
}cr <- corr("specdata", 150)
head(cr)
crdat<-corr("specdata",150)
head(crdat)
ls
list.files(getwd())
list.files()
list.files(numeric())
list.files(numeric(0))
list.files(mode="numeric"())
list.files(mode="numeric"(1))
list.files(mode="numeric")
list.files(pattern = .__C__sourceEnvironment)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating the location of
## the CSV files
## 'threshold' is a numeric vector of length 1 indicating the number of
## completely observed observations (on all variables) required to compute
## the correlation between nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
df = complete(directory)
ids = df[df["nobs"] > threshold, ]$id
corrr = numeric()
for (i in ids) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
dff = newRead[complete.cases(newRead), ]
corrr = c(corrr, cor(dff$sulfate, dff$nitrate))
}
return(corrr)
}
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating the location of
## the CSV files
## 'threshold' is a numeric vector of length 1 indicating the number of
## completely observed observations (on all variables) required to compute
## the correlation between nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
df = complete(directory)
ids = df[df["nobs"] > threshold, ]$id
corrr = numeric()
for (i in ids) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
dff = newRead[complete.cases(newRead), ]
corrr = c(corrr, cor(dff$sulfate, dff$nitrate))
}
return(corrr)
}
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating the location of
## the CSV files
## 'threshold' is a numeric vector of length 1 indicating the number of
## completely observed observations (on all variables) required to compute
## the correlation between nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
#assign the path to specdata
directory<-setwd("C:/Users/anne/Desktop/DataScienceFiles/specdata/specdata")
"specdata"<-directory
df = complete(directory)
ids = df[df["nobs"] > threshold, ]$id
corrr = numeric()
for (i in ids) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
dff = newRead[complete.cases(newRead), ]
corrr = c(corrr, cor(dff$sulfate, dff$nitrate))
}
return(corrr)
}
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0) {
#assign the path to specdata
directory<-setwd("C:/Users/anne/Desktop/DataScienceFiles/specdata/specdata")
"specdata"<-directory
corDf = complete(directory)
ids = corDf[corDf["nobs"] > threshold, ]$id
corrNum = numeric()
for (i in ids) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
corDf2 = newRead[complete.cases(newRead), ]
corrNum = c(corrNum, cor(corDf2$sulfate, corDf2$nitrate))
}
return(corrNum)
}
cr <- corr("specdata", 150)
head(cr)
summary(c)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
cr<-corr("specdata", 5000)
head(cr)
head(cr)
cr<-corr("specdata", 5000)
summary(cr)
length(cr)
cr<-corr("specdata")
summary(cr)
length(cr)
corr <- function(directory, threshold = 0) {
#assign the path to specdata
directory<-getwd()
#directory<-setwd("C:/Users/anne/Desktop/DataScienceFiles/specdata/specdata")
"specdata"<-directory
corDf = complete(directory)
ids = corDf[corDf["nobs"] > threshold, ]$id
corrNum = numeric()
for (i in ids) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
corDf2 = newRead[complete.cases(newRead), ]
corrNum = c(corrNum, cor(corDf2$sulfate, corDf2$nitrate))
}
return(corrNum)
}
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0) {
#assign the path to specdata
directory<-getwd()
#directory<-setwd("C:/Users/anne/Desktop/DataScienceFiles/specdata/specdata")
"specdata"<-directory
corDf = complete(directory)
ids = corDf[corDf["nobs"] > threshold, ]$id
corrNum = numeric()
for (i in ids) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
corDf2 = newRead[complete.cases(newRead), ]
corrNum = c(corrNum, cor(corDf2$sulfate, corDf2$nitrate))
}
return(corrNum)
}
cr <- corr("specdata", 150)
head(cr)
#RETURN COMPLETE CASES EXERCISE
complete <- function(directory, id = 1:332) {
#assign the path to specdata
#directory<-setwd("C:/Users/anne/Desktop/DataScienceFiles/specdata/specdata")
directory<-getwd()
"specdata"<-directory
#lists the files in the directory
all_files <- list.files(directory, full.names = TRUE)
#empty data frame were we will store the read from the loop
compdf <- data.frame()
nobs = numeric()
nobs = rep(0, length(id))
k <- 1
for (i in id) {
compdf <- read.csv(all_files[i])
nobs[k] <- sum(complete.cases(compdf))
k <- k + 1
}
returnVal <- data.frame(id, nobs)
returnVal
}
complete("specdata",2)
complete("specdata",2:12)
#CALCULATE MEAN OF POLLUTANT ACROSS FILES EXERCISE
pollutantmean <- function(directory, pollutant, id = 1:332) {
#assign the path to specdata
#directory<-setwd("C:/Users/anne/Desktop/DataScienceFiles/specdata/specdata")
directory<-getwd()
"specdata"<-directory
#get list of files
all_files = list.files(directory)
#extract file names and store as numeric
file.names = as.numeric(sub("\\.csv$","",all_files))
#setup file selection
selected.files = all_files[match(id,file.names)]
#import data
polDat = lapply(file.path(directory,selected.files),read.csv)
#convert into data frame
polDat = do.call(rbind.data.frame,polDat)
#calculate mean
mean(polDat[,pollutant],na.rm=TRUE)
}
pollutantmean("specdata","nitrate",332)
pollutantmean("specdata","nitrate",331)
pollutantmean("specdata", "nitrate", 23)
#CALCULATE MEAN OF POLLUTANT ACROSS FILES EXERCISE
pollutantmean <- function(directory, pollutant, id = 1:332,removeNA=TRUE) {
#assign the path to specdata
#directory<-setwd("C:/Users/anne/Desktop/DataScienceFiles/specdata/specdata")
directory<-getwd()
"specdata"<-directory
#get list of files
all_files = list.files(directory)
#extract file names and store as numeric
file.names = as.numeric(sub("\\.csv$","",all_files))
#setup file selection
selected.files = all_files[match(id,file.names)]
#import data
polDat = lapply(file.path(directory,selected.files),read.csv)
#convert into data frame
polDat = do.call(rbind.data.frame,polDat)
#calculate mean
mean(polDat[,pollutant],na.rm=TRUE)
}
pollutantmean("specdata", "nitrate", 23)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
R.version.string
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
TRUE==TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5!=7
5 NOT= 7
5 = 7
5==7
5!==7
5 !== 7
skp()
skip()
FALSE&FALSE
TRUE & c(TRUE, FALSE, FALSE)
(1,2,3) + (2,3,4)
TRUE && c(TRUE, FALSE, FALSE)
TRUE| c(TRUE, FALSE, FALSE)
TRUE|| c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
boring_function <- function(x) {
x
}
boring_function(x)
submit()
boring_function('My first function!')
boring_function
my_mean <- function(my_vector) {
#Write your code here!
sum(my_vector)/length(my_vector)
# Remember: the last expression evaluated will be returned!
}
submit()
my_mean <- function(my_vector) {
# Write your code here!
mmsum<-sum(my_vector)
mmlen<-length(my_vector)
mm<-mmsum/mmlen
returnValue(mm)
# Remember: the last expression evaluated will be returned!
}
submit()
skip()
my_mean(c(4,5,10))
remainder <- function(num, divisor=2) {
rmd<-num%%divisor
return(rmd)
# Write your code here!
# Remember: the last expression evaluated will be returned!
}
submit()
skip()
remainder(5)
remainder
remainder(11,5)
remainder(divisor = 11, num = 5)
info()
bye()
swirl()
remainder(4, div = 2)
args(remainder)
evaluate <- function(func, dat){
func(dat)
# Write your code here!
# Remember: the last expression evaluated will be returned!
}
submit()
skip()
evaluate(sd(c(1.4, 3.6, 7.9, 8.8)))
evaluate <- function(func, dat){
# Write your code here!
# Remember: the last expression evaluated will be returned!
func(dat)
}
evaluate <- function(func, dat){
# Write your code here!
# Remember: the last expression evaluated will be returned!
func(dat)
}
evaluate(sd(c(1.4, 3.6, 7.9, 8.8)))
evaluate <- function(func, dat){
# Write your code here!
# Remember: the last expression evaluated will be returned!
func(dat)
}
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
paste()
?paste
paste("Programming", "is", "fun!")
telegram <- function(...){
paste("START",...,"STOP")
}
submit()
telegram <- function(...){
paste("START",...,"STOP",...)
}
submit()
telegram <- function(...){
paste("START",...,"STOP",...)
}
submit()
telegram <- function(...){
paste("START",...,"STOP")
}
submit()
skip()
telegram("I will arrive today")
submit()
mad_libs <- function(...){
args<-list(...)
place<-args[["JIC"]]
adjective<-args[["angry"]]
noun<-args[["ATM"]]
# Do your unpacking here!
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
skip
skip()
mad_libs("JIC","angry","ATM")
"%p%" <- function(){ # Remember to add arguments!
left right
}
"%p%" <- function(first, second){ # Remember to add arguments!
first second
}
